{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/storage.service\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = [\"teleprompterText\"];\nconst _c1 = (a0, a1, a2) => ({\n  \"transform\": a0,\n  \"font-family\": a1,\n  \"font-size\": a2\n});\nexport class TeleprompterComponent {\n  constructor(storageService) {\n    this.storageService = storageService;\n    this.settings = {\n      horizontalFlip: false,\n      verticalFlip: false,\n      speed: 'medium',\n      font: 'Arial',\n      fontSize: 24,\n      theme: 'light'\n    };\n    this.text = '';\n    this.scrollPosition = 0;\n    this.isScrolling = false;\n    this.isFullscreen = false;\n  }\n  ngOnChanges(changes) {\n    if (changes['settings']) {\n      this.applySettings();\n    }\n  }\n  ngAfterViewInit() {\n    this.applySettings();\n  }\n  applySettings() {\n    this.updateTextTransform();\n  }\n  getTransform() {\n    let transform = '';\n    if (this.settings.horizontalFlip) {\n      transform += 'scaleX(-1) ';\n    }\n    if (this.settings.verticalFlip) {\n      transform += 'scaleY(-1) ';\n    }\n    return transform.trim();\n  }\n  updateTextTransform() {\n    if (this.teleprompterText) {\n      this.teleprompterText.nativeElement.style.transform = this.getTransform();\n    }\n  }\n  play() {\n    if (this.isScrolling) return;\n    this.isScrolling = true;\n    this.scrollInterval = setInterval(() => {\n      if (this.teleprompterText) {\n        this.teleprompterText.nativeElement.scrollTop += this.getScrollSpeed();\n        this.scrollPosition = this.calculateScrollPercentage();\n      }\n    }, this.getInterval());\n  }\n  pause() {\n    this.isScrolling = false;\n    clearInterval(this.scrollInterval);\n  }\n  reset() {\n    this.isScrolling = false;\n    clearInterval(this.scrollInterval);\n    if (this.teleprompterText) {\n      this.teleprompterText.nativeElement.scrollTop = 0;\n      this.scrollPosition = 0;\n    }\n  }\n  onScroll() {\n    this.scrollPosition = this.calculateScrollPercentage();\n  }\n  onManualScroll(event) {\n    if (this.teleprompterText) {\n      const scrollHeight = this.teleprompterText.nativeElement.scrollHeight - this.teleprompterText.nativeElement.clientHeight;\n      const newScrollTop = event.target.value / 100 * scrollHeight;\n      this.teleprompterText.nativeElement.scrollTop = newScrollTop;\n      this.scrollPosition = this.calculateScrollPercentage();\n    }\n  }\n  calculateScrollPercentage() {\n    if (!this.teleprompterText) return 0;\n    const scrollTop = this.teleprompterText.nativeElement.scrollTop;\n    const scrollHeight = this.teleprompterText.nativeElement.scrollHeight - this.teleprompterText.nativeElement.clientHeight;\n    return scrollHeight > 0 ? scrollTop / scrollHeight * 100 : 0;\n  }\n  getInterval() {\n    switch (this.settings.speed) {\n      case 'slow':\n        return 100;\n      case 'medium':\n        return 50;\n      case 'fast':\n        return 20;\n      default:\n        return 50;\n    }\n  }\n  getScrollSpeed() {\n    switch (this.settings.speed) {\n      case 'slow':\n        return 1;\n      case 'medium':\n        return 2;\n      case 'fast':\n        return 4;\n      default:\n        return 2;\n    }\n  }\n  toggleFullscreen() {\n    if (!this.isFullscreen) {\n      if (document.documentElement.requestFullscreen) {\n        document.documentElement.requestFullscreen();\n      }\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n    this.isFullscreen = !this.isFullscreen;\n  }\n  onFullscreenChange(event) {\n    this.isFullscreen = !!document.fullscreenElement;\n  }\n  static {\n    this.ɵfac = function TeleprompterComponent_Factory(t) {\n      return new (t || TeleprompterComponent)(i0.ɵɵdirectiveInject(i1.StorageService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TeleprompterComponent,\n      selectors: [[\"app-teleprompter\"]],\n      viewQuery: function TeleprompterComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.teleprompterText = _t.first);\n        }\n      },\n      hostBindings: function TeleprompterComponent_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"fullscreenchange\", function TeleprompterComponent_fullscreenchange_HostBindingHandler($event) {\n            return ctx.onFullscreenChange($event);\n          }, false, i0.ɵɵresolveDocument);\n        }\n      },\n      inputs: {\n        settings: \"settings\",\n        text: \"text\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 17,\n      vars: 8,\n      consts: [[\"teleprompterText\", \"\"], [1, \"flex-1\", \"flex\", \"flex-col\", \"items-center\", \"justify-center\", \"p-4\"], [1, \"w-full\", \"max-w-4xl\", \"relative\"], [1, \"whitespace-pre-line\", \"overflow-y-auto\", \"h-[400px]\", \"p-4\", \"border\", \"border-gray-300\", \"rounded-md\", 3, \"scroll\", \"ngStyle\"], [1, \"absolute\", \"bottom-2\", \"right-2\", \"flex\", \"space-x-2\"], [1, \"btn\", \"btn-sm\", 3, \"click\"], [1, \"mt-4\", \"flex\", \"space-x-2\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"btn\", \"btn-accent\", 3, \"click\"], [1, \"mt-4\", \"w-full\", \"max-w-4xl\"], [\"type\", \"range\", \"min\", \"0\", \"max\", \"100\", 1, \"range\", 3, \"input\", \"value\"]],\n      template: function TeleprompterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3, 0);\n          i0.ɵɵlistener(\"scroll\", function TeleprompterComponent_Template_div_scroll_2_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onScroll());\n          });\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n          i0.ɵɵlistener(\"click\", function TeleprompterComponent_Template_button_click_6_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.toggleFullscreen());\n          });\n          i0.ɵɵtext(7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(8, \"div\", 6)(9, \"button\", 7);\n          i0.ɵɵlistener(\"click\", function TeleprompterComponent_Template_button_click_9_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.play());\n          });\n          i0.ɵɵtext(10, \"Play\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function TeleprompterComponent_Template_button_click_11_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.pause());\n          });\n          i0.ɵɵtext(12, \"Pause\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function TeleprompterComponent_Template_button_click_13_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.reset());\n          });\n          i0.ɵɵtext(14, \"Reset\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(15, \"div\", 10)(16, \"input\", 11);\n          i0.ɵɵlistener(\"input\", function TeleprompterComponent_Template_input_input_16_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onManualScroll($event));\n          });\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction3(4, _c1, ctx.getTransform(), ctx.settings.font, ctx.settings.fontSize + \"px\"));\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", ctx.text, \" \");\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\" \", ctx.isFullscreen ? \"Exit Fullscreen\" : \"Fullscreen\", \" \");\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"value\", ctx.scrollPosition);\n        }\n      },\n      dependencies: [i2.NgStyle],\n      styles: [\"/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ0ZWxlcHJvbXB0ZXIuY29tcG9uZW50LmNzcyJ9 */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90ZWxlcHJvbXB0ZXIvdGVsZXByb21wdGVyLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFQSx3S0FBd0siLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["TeleprompterComponent","constructor","storageService","settings","horizontalFlip","verticalFlip","speed","font","fontSize","theme","text","scrollPosition","isScrolling","isFullscreen","ngOnChanges","changes","applySettings","ngAfterViewInit","updateTextTransform","getTransform","transform","trim","teleprompterText","nativeElement","style","play","scrollInterval","setInterval","scrollTop","getScrollSpeed","calculateScrollPercentage","getInterval","pause","clearInterval","reset","onScroll","onManualScroll","event","scrollHeight","clientHeight","newScrollTop","target","value","toggleFullscreen","document","documentElement","requestFullscreen","exitFullscreen","onFullscreenChange","fullscreenElement","i0","ɵɵdirectiveInject","i1","StorageService","selectors","viewQuery","TeleprompterComponent_Query","rf","ctx","ɵɵlistener","TeleprompterComponent_fullscreenchange_HostBindingHandler","$event","ɵɵresolveDocument","ɵɵelementStart","TeleprompterComponent_Template_div_scroll_2_listener","ɵɵrestoreView","_r1","ɵɵresetView","ɵɵtext","ɵɵelementEnd","TeleprompterComponent_Template_button_click_6_listener","TeleprompterComponent_Template_button_click_9_listener","TeleprompterComponent_Template_button_click_11_listener","TeleprompterComponent_Template_button_click_13_listener","TeleprompterComponent_Template_input_input_16_listener","ɵɵadvance","ɵɵproperty","ɵɵpureFunction3","_c1","ɵɵtextInterpolate1"],"sources":["/home/project/src/app/components/teleprompter/teleprompter.component.ts","/home/project/src/app/components/teleprompter/teleprompter.component.html"],"sourcesContent":["import { Component, ViewChild, ElementRef, Input, OnChanges, SimpleChanges, HostListener } from '@angular/core';\n    import { Settings } from '../../interfaces/settings.interface';\n    import { StorageService } from '../../services/storage.service';\n\n    @Component({\n      selector: 'app-teleprompter',\n      templateUrl: './teleprompter.component.html',\n      styleUrls: ['./teleprompter.component.css']\n    })\n    export class TeleprompterComponent implements OnChanges {\n      @Input() settings: Settings = {\n        horizontalFlip: false,\n        verticalFlip: false,\n        speed: 'medium',\n        font: 'Arial',\n        fontSize: 24,\n        theme: 'light'\n      };\n      @Input() text: string = '';\n      @ViewChild('teleprompterText') teleprompterText!: ElementRef;\n\n      scrollInterval: any;\n      scrollPosition: number = 0;\n      isScrolling: boolean = false;\n      isFullscreen: boolean = false;\n\n      constructor(private storageService: StorageService) {\n      }\n\n      ngOnChanges(changes: SimpleChanges): void {\n        if (changes['settings']) {\n          this.applySettings();\n        }\n      }\n\n      ngAfterViewInit() {\n        this.applySettings();\n      }\n\n      applySettings() {\n        this.updateTextTransform();\n      }\n\n      getTransform(): string {\n        let transform = '';\n        if (this.settings.horizontalFlip) {\n          transform += 'scaleX(-1) ';\n        }\n        if (this.settings.verticalFlip) {\n          transform += 'scaleY(-1) ';\n        }\n        return transform.trim();\n      }\n\n      updateTextTransform() {\n        if (this.teleprompterText) {\n          this.teleprompterText.nativeElement.style.transform = this.getTransform();\n        }\n      }\n\n      play() {\n        if (this.isScrolling) return;\n        this.isScrolling = true;\n        this.scrollInterval = setInterval(() => {\n          if (this.teleprompterText) {\n            this.teleprompterText.nativeElement.scrollTop += this.getScrollSpeed();\n            this.scrollPosition = this.calculateScrollPercentage();\n          }\n        }, this.getInterval());\n      }\n\n      pause() {\n        this.isScrolling = false;\n        clearInterval(this.scrollInterval);\n      }\n\n      reset() {\n        this.isScrolling = false;\n        clearInterval(this.scrollInterval);\n        if (this.teleprompterText) {\n          this.teleprompterText.nativeElement.scrollTop = 0;\n          this.scrollPosition = 0;\n        }\n      }\n\n      onScroll() {\n        this.scrollPosition = this.calculateScrollPercentage();\n      }\n\n      onManualScroll(event: any) {\n        if (this.teleprompterText) {\n          const scrollHeight = this.teleprompterText.nativeElement.scrollHeight - this.teleprompterText.nativeElement.clientHeight;\n          const newScrollTop = (event.target.value / 100) * scrollHeight;\n          this.teleprompterText.nativeElement.scrollTop = newScrollTop;\n          this.scrollPosition = this.calculateScrollPercentage();\n        }\n      }\n\n      calculateScrollPercentage(): number {\n        if (!this.teleprompterText) return 0;\n        const scrollTop = this.teleprompterText.nativeElement.scrollTop;\n        const scrollHeight = this.teleprompterText.nativeElement.scrollHeight - this.teleprompterText.nativeElement.clientHeight;\n        return scrollHeight > 0 ? (scrollTop / scrollHeight) * 100 : 0;\n      }\n\n      getInterval(): number {\n        switch (this.settings.speed) {\n          case 'slow': return 100;\n          case 'medium': return 50;\n          case 'fast': return 20;\n          default: return 50;\n        }\n      }\n\n      getScrollSpeed(): number {\n        switch (this.settings.speed) {\n          case 'slow': return 1;\n          case 'medium': return 2;\n          case 'fast': return 4;\n          default: return 2;\n        }\n      }\n\n      toggleFullscreen() {\n        if (!this.isFullscreen) {\n          if (document.documentElement.requestFullscreen) {\n            document.documentElement.requestFullscreen();\n          }\n        } else {\n          if (document.exitFullscreen) {\n            document.exitFullscreen();\n          }\n        }\n        this.isFullscreen = !this.isFullscreen;\n      }\n\n      @HostListener('document:fullscreenchange', ['$event'])\n      onFullscreenChange(event: any) {\n        this.isFullscreen = !!document.fullscreenElement;\n      }\n    }\n","<div class=\"flex-1 flex flex-col items-center justify-center p-4\">\n      <div class=\"w-full max-w-4xl relative\">\n        <div #teleprompterText\n          [ngStyle]=\"{\n            'transform': getTransform(),\n            'font-family': settings.font,\n            'font-size': settings.fontSize + 'px'\n          }\"\n          class=\"whitespace-pre-line overflow-y-auto h-[400px] p-4 border border-gray-300 rounded-md\"\n          (scroll)=\"onScroll()\"\n        >\n          {{ text }}\n        </div>\n        <div class=\"absolute bottom-2 right-2 flex space-x-2\">\n          <button class=\"btn btn-sm\" (click)=\"toggleFullscreen()\">\n            {{ isFullscreen ? 'Exit Fullscreen' : 'Fullscreen' }}\n          </button>\n        </div>\n      </div>\n      <div class=\"mt-4 flex space-x-2\">\n        <button class=\"btn btn-primary\" (click)=\"play()\">Play</button>\n        <button class=\"btn btn-secondary\" (click)=\"pause()\">Pause</button>\n        <button class=\"btn btn-accent\" (click)=\"reset()\">Reset</button>\n      </div>\n      <div class=\"mt-4 w-full max-w-4xl\">\n        <input type=\"range\" min=\"0\" max=\"100\" class=\"range\" [value]=\"scrollPosition\" (input)=\"onManualScroll($event)\">\n      </div>\n    </div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}